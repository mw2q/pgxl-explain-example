BEGIN;
BEGIN
EXPLAIN
select
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment
from
	part,
	supplier,
	partsupp,
	nation,
	region
where
	p_partkey = ps_partkey
	and s_suppkey = ps_suppkey
	and p_size = 2
	and p_type like '%NICKEL'
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'MIDDLE EAST'
	and ps_supplycost = (
		select
			min(ps_supplycost)
		from
			partsupp,
			supplier,
			nation,
			region
		where
			p_partkey = ps_partkey
			and s_suppkey = ps_suppkey
			and s_nationkey = n_nationkey
			and n_regionkey = r_regionkey
			and r_name = 'MIDDLE EAST'
	)
order by
	s_acctbal desc,
	n_name,
	s_name,
	p_partkey
LIMIT 100;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1589939.53..1589939.54 rows=1 width=190)
   ->  Remote Subquery Scan on all (datanode_1_1,datanode_2_1)  (cost=1589939.53..1589939.54 rows=1 width=190)
         ->  Limit  (cost=1589939.53..1589939.54 rows=1 width=190)
               ->  Sort  (cost=1589939.53..1589939.54 rows=1 width=190)
                     Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
                     ->  Merge Join  (cost=631604.97..1589939.52 rows=1 width=190)
                           Merge Cond: (part.p_partkey = partsupp.ps_partkey)
                           Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
                           ->  Index Scan using pk_part on part  (cost=0.18..187022.25 rows=8584 width=30)
                                 Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 2))
                           ->  Materialize  (cost=631583.00..639527.91 rows=1588981 width=168)
                                 ->  Sort  (cost=631583.00..635555.46 rows=1588981 width=168)
                                       Sort Key: partsupp.ps_partkey
                                       ->  Nested Loop  (cost=1.75..207226.58 rows=1588981 width=168)
                                             ->  Nested Loop  (cost=1.56..5806.62 rows=20000 width=164)
                                                   Join Filter: (nation.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                         Filter: (r_name = 'MIDDLE EAST'::bpchar)
                                                   ->  Hash Join  (cost=1.56..4555.56 rows=100000 width=168)
                                                         Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                         ->  Seq Scan on supplier  (cost=0.00..3179.00 rows=100000 width=142)
                                                         ->  Hash  (cost=1.25..1.25 rows=25 width=34)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                             ->  Index Scan using partsupp_ps_suppkey_idx on partsupp  (cost=0.18..9.28 rows=79 width=12)
                                                   Index Cond: (ps_suppkey = supplier.s_suppkey)
                           SubPlan 1
                             ->  Aggregate  (cost=111.33..111.34 rows=1 width=4)
                                   ->  Remote Subquery Scan on all (datanode_1_1,datanode_2_1)  (cost=0.49..111.32 rows=2 width=4)
                                         ->  Aggregate  (cost=0.49..111.32 rows=1 width=4)
                                               ->  Nested Loop  (cost=0.49..111.32 rows=2 width=4)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'MIDDLE EAST'::bpchar)
                                                     ->  Nested Loop  (cost=0.49..110.15 rows=9 width=8)
                                                           ->  Nested Loop  (cost=0.35..108.66 rows=9 width=8)
                                                                 ->  Index Scan using pk_partsupp on partsupp partsupp_1  (cost=0.18..34.91 rows=9 width=8)
                                                                       Index Cond: (part.p_partkey = ps_partkey)
                                                                 ->  Index Scan using pk_supplier on supplier supplier_1  (cost=0.17..8.19 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Index Scan using pk_nation on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
(41 rows)

COMMIT;
COMMIT
